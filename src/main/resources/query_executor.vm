package de.tiq.jdbc;

 import java.sql.ResultSet;
 import java.sql.SQLException;
 import javax.annotation.Generated;

/**
 * Abstract class to define mandatory methods, processing the sql.</br> 
 * Your subclass should be annotated with @JdbcDriver
 *
 * @author D. HÃ¤berlein
 * @see de.tiq.jdbc.annotations.JdbcDriver
 */
@Generated("${generatedAnnotationClass}") // creation time: $creatingTimestamp
public abstract class QueryExecutor {

	protected int resultSetType;
	protected int resultSetConcurrency;
	protected int resultSetHoldability;

#if($connectionHandler)	
	protected $connectionHandler handle;
	
	protected QueryExecutor($connectionHandler handle){
		this.handle = handle;	
	}
#else
	protected ConnectionHandler handle;
	
	protected QueryExecutor(ConnectionHandler handle){
		this.handle = handle;	
	}
#end

	public void setResultSetType(int resultSetType){
		this.resultSetType = resultSetType;
	}
	
	public void setResultSetConcurrency(int resultSetConcurrency){
		this.resultSetConcurrency = resultSetConcurrency;
	}
	
	public void setResultSetHoldability(int resultSetHoldability){
		this.resultSetHoldability = resultSetHoldability;
	}
	
	public abstract boolean execute(String sql) throws SQLException;
	public abstract ResultSet getResultSet() throws SQLException;
	
	public abstract ResultSet executeQuery(String sql) throws SQLException;
	public abstract int executeUpdate(String sql) throws SQLException;
}
